#2193
n = int(input())
dp_zero = [0]*(n+1)
dp_one = [0]*(n+1)
dp_zero[1] = 0
dp_one[1] = 1

for i in range(2,n+1):
  dp_zero[i] = dp_one[i-1]+dp_zero[i-1]
  dp_one[i] = dp_zero[i-1]

answer = dp_zero[n] + dp_one[n]
print(answer)

// 끝이 0으로 끝나는 경우를 dp_zero, 1로 끝나는 경우를 dp_one이라고 두고 dp_zero[i]의 경우 이전 경우 끝이 0, 1로 끝나는 경우의 개수의 합과 같다.
//그러나, dp_one[i]의 경우 1이 연속되어서는 안된다는 조건에 의해서 dp_zero[i-1]의 개수와 같다.

다른 풀이:
1) 바킹독 소스코드
#include <stdio.h>
int main(void) {
    long long D[100][2]; // D[i][j] : i자리 수, 맨 앞에 j가 옴
    int N;
    scanf("%d", &N);
    D[1][0] = 1;
    D[1][1] = 1;
    for (int i = 2; i <= N; i++) {
        D[i][0] = D[i - 1][0] + D[i - 1][1];
        D[i][1] = D[i - 1][0];
    }
    printf("%lld", D[N][1]);
}

2)맨 앞은 0으로 시작할 수 없기 때문에 1로 고정이 되고, 1이 연속으로 나올 수 없기 때문에 그 다음은 0으로 고정이 되어 10다음에 나오는 수를 찾아주면 되는 것이다.
[출처] [백준] 2193 - 이친수|작성자 occidere
점화식을 d[i] = d[i-2]+d[i-1]로 찾을 수 있다.
