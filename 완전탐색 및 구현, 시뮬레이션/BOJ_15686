#15686
import math
from itertools import combinations as cb

n, m = map(int,input().split())
gp = []
house = []
chick = []
result = 1e9

for _ in range(n):
  gp.append(list(map(int,input().split())))

# 각 도시 간 치킨 거리 구하기
def distance(x1,y1,x2,y2):
  result = abs(x1-x2) + abs(y1-y2)
  return result

# 치킨집 M개의 조합
for i in range(n):
  for j in range(n):
    if gp[i][j] == 1:
      house.append((i,j))
    elif gp[i][j] == 2:
      chick.append((i,j))
chicken = list(cb(chick,m))

# 도시의 치킨 거리 합 최종 출력 - 도움 받은 부분, loop문 구성
for j in chicken:
  ans = 0
  for i in house:
    temp = 1e9 # 집마다 최소 치킨 거리 최소화 - 도움 받은 부분
    for k in range(m):
      temp = min(temp,distance(j[k][0],j[k][1],i[0],i[1]))
    ans += temp
  result = min(result,ans)

print(result)

다른 Solution: 백트래킹 사용
N,M = map(int,input().split())

min_ans = 99999999

home = []

chick = []

for i in range(N): # 집과 치킨의 좌표를 리스트에 넣어준다.
    row = list(map(int,input().split()))

    for j in range(N):
        if row[j] == 1:
            home.append((i,j))
        elif row[j]==2:
            chick.append((i,j))

visited = [False] * len(chick)

def dfs(idx,cnt):

    global min_ans

    if cnt == M:
        # print(visited[:])

        ans = 0

        for i in home: # 집 좌표에 대해 모든 치킨집과의 거리를 구함
            distance = 9999999 # 거리를 큰 수로 정의
            for j in range(len(visited)):
                if visited[j]:
                    check_num = abs(i[0]-chick[j][0])+abs(i[1]-chick[j][1])
                    distance = min(distance,check_num) # 각 집에 대해 치킨 거리가 최소인 값을 구함
            ans +=distance
        min_ans = min(ans,min_ans)

        return

    for i in range(idx,len(chick)):
        if not visited[i]:

            visited[i] = True
            dfs(i+1,cnt+1)
            visited[i]=False



dfs(0,0)

print(min_ans)
