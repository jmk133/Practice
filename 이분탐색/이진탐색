1. 상계와 하계(upper bound와 lower bound)
-> 값을 찾을 때 원하는 값이 없는 경우, 신호를 반환하는 일반적인 이진 탐색과 달리 상계, 하계를 사용하면 찾고자 하는 값 혹은 그 값의 초과값이 처음 나타는 위치를 찾을 수 있다.
-> '특정 값을 어느 위치에 삽입' 해야 하는지 탐색 할 때 많이 사용한다. (혹은 중복된 원소가 존재할 경우 고려해본다.)

1) 상계: 찾고자 하는 값(target)보다 큰 값의 처음 위치를 반환한다.
public class UpperBound {
 
    public static void main(String[] args) {
        int[] array = {1, 3, 3, 3, 4, 6, 7, 7, 14, 14, 16, 20};
        int target = 7;
 
        int left = 0;
        int right = array.length - 1;
        while (left < right) {
            int mid = (left + right) / 2;
 
            if (array[mid] <= target) {
                left = mid + 1;
                continue;
            }
            right = mid;
        }
 
        System.out.println("right = " + right);
        System.out.println("array[right] = " + array[right]);
    }
}
해설: mid값이 target과 같아도 left를 갱신한다. target과 같은 값이어도 범위를 줄이며 target보다 큰 값이 나오도로 한다.
또한, 일반 이진 탐색과 달리 right를 mid - 1로 갱신하지 않고 mid로 갱신한다. 결과적으로 결괏값을 출력 시 right를 사용한다.

2) 하계: target보다 크거나 같은 값의 처음 위치를 반환한다.
public class LowerBound {
 
    public static void main(String[] args) {
        int[] array = {1, 3, 3, 3, 4, 6, 7, 7, 14, 14, 16, 20};
        int target = 7;
 
        int left = 0;
        int right = array.length - 1;
        while (left < right) {
            int mid = (left + right) / 2;
 
            if (array[mid] < target) {
                left = mid + 1;
                continue;
            }
            right = mid;
        }
 
        System.out.println("right = " + right);
        System.out.println("array[right] = " + array[right]);
    }
}
해설: 상계와 달리 target보다 작은 경우에만 left를 갱신한다. right는 mid로 갱신하기에 결괏값은 항상 right에 위치한다.

이진탐색 접근법: '정렬되어 있는 배열'에서 탐색 범위를 절반으로 줄여가며 찾는 탐색 방법
무한루프에 빠지지 않도록 mid값을 적절하게 선택해야 한다. start와 end가 1 차이가 날 경우 특히 주의해야 한다.

parametric search: 조건을 만족하는 최소/최댓값을 구하는 문제(최적화 문제)를 결정 문제로 변환하는 문제
ex)BOJ 1654번 랜선 자르기
(최적화 문제) N개를 만들 수 있는 랜선의 최대 길이
(결정 문제) 랜선의 길이가 X일 때 랜선이 N개 이상인가 아닌가?
