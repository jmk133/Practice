#2493 실패 코드
n = int(input())
tower = list(map(int, input().split()))
stack = tower[0:n-1]
ans = [0] * n  # 결과 리스트

for i in range(n - 1, -1, -1):
    while stack and stack[-1] <= tower[i]:
        stack.pop()
    if stack:
      ans[i] = tower.index(stack[-1]) + 1

print(*ans)

// 시작 발상: 하나하나 원소를 뒤에서부터 순회하면서 앞에 있는 작은 원소의 개수를 세기 => O(N^2)으로 시간 초과
// 실패 발상: 뒤에서부터 순회하면서 stack의 상단값 > 현재 순회 값이면 answer에 index를 기록하고, 아닌 경우는 stack에서 pop하기 => 반례: 6, 9 4 6 3 7 8
// 정답 발상: 출처: https://seongonion.tistory.com/123
1) stack이 존재하는 동안에 이전에 들어온 stack[-1][1]의 값과 지금 들어올 top[i]의 값을 비교한다.
2) 만약, 이전에 들어온 stack[-1][1]의 값이 top[i] 보다 크면 레이저 신호를 수신할 수 있기 때문에 그때의 stack[-1][0](index)를 저장한다.
3)그렇지 않으면, 다음으로 존재하는 stack값을 확인하기 위해 pop()한다.
4) stack에 아무것도 남지 않으면 [i, top[i]]값을 넣는다.(이때, i를 넣는 이유는 index를 저장하기 위함이다.)
import sys
input = sys.stdin.readline

n = int(input())
tops = list(map(int, input().split()))

stack = []
# 인덱스와 탑의 높이
stack.append([1, tops[0]])
# 맨 왼쪽 탑은 수신되지 않음
ans = [0]

for i in range(1, n):
    while stack:
        if stack[-1][1] >= tops[i]:
            ans.append(stack[-1][0])
            stack.append([i + 1, tops[i]])
            break
        
        else:
            stack.pop()

    if not stack:
        ans.append(0)
        stack.append([i + 1, tops[i]])

print(*ans, end=" ")

p.s. 시간복잡도
" 첫번째 코드에서 이중 반복문을 각각 최악의 경우 `O(N)`번씩 돈다고 생각해서 `for * while = O(N^2)` 이라고 판단하면 안된다. 만일 바깥 루프가 한번 돌 때 운이 안 좋아서 안쪽 루프의 `N`개의 원소를 pop했다고 가정하면, 그 한번의 루프를 제외한 나머지는 모두 `pop`을 안했다는 것이다.(while stack: 조건때문에) 
즉, 아무리 루프를 오래 돌리려고 해도 안쪽 루프가 N번보다 많이 돌 수 는 없다.
언젠가 많이 돈 때가 있다면, 다른 때는 많이 안 돌았어야만 하고 총 횟수 역시  `O(N)`밖에 안된다. 즉, 안쪽 루프가 도는 총 횟수를 다 합했을 때 `O(N)`이라는 큰 그림을 보는게 중요하지, 바깥 루프가 한 번 돌때 안쪽 루프가 최대 `O(N)`번 도는 그림은 볼 필요가 없다는 뜻이다. 
이 코드의 최악의 경우에도 전체가 `O(N)`이다. "
