#1021
from collections import deque

def find_print_order(n, m, priorities):
    # 문서의 중요도와 인덱스를 쌍으로 저장
    queue = deque((priority, idx) for idx, priority in enumerate(priorities))
    print_order = 0  # 몇 번째로 인쇄되는지 추적

    while queue:
        current = queue.popleft()
        # 현재 문서보다 중요도가 높은 문서가 남아 있는지 확인
        if any(current[0] < doc[0] for doc in queue):
            queue.append(current)  # 중요도가 낮으면 맨 뒤로 이동
        else:
            print_order += 1  # 인쇄 진행
            if current[1] == m:  # 타겟 문서가 인쇄되었는지 확인
                return print_order

# 테스트케이스 입력 처리
t = int(input())  # 테스트케이스 개수
results = []

for _ in range(t):
    n, m = map(int, input().split())  # 문서 개수와 타겟 문서의 위치
    priorities = list(map(int, input().split()))  # 문서 중요도 리스트
    results.append(find_print_order(n, m, priorities))

# 결과 출력
for res in results:
    print(res)
